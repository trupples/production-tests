#!/bin/expect -f

# Uploads firmware and starts serial communication.
# Each test stage has the following interaction:
# 1. The test name is printed to stdout (UART, RAM, FLASH, LCD, RTC, SD card, led1..4, button1..3, T1L, WIZ ETH, ADE9430) 
# 2. If applicable (LCD, led1..4), y/n is read from stdin
# 3. A test verdict (pass/fail) is printed to stdout
# 4. We pass to the next test even if this one was failed. Early exit should be implemented by the script calling this one.
#
# The last test (T1L socket) doesn't wait for a verdict because the host must check the T1L link to the DUT by other means; can't be done via UART.

# Hide UART communications, only show output from `send_user` calls
log_user 0

# Upload and run firmware
spawn ./firmware_prod.sh

send_user "Uploading FW\n"

# While the firmware is being uploaded but isn't yet done (we have around 25 seconds) connect via serial...
spawn picocom -b 115200 "$env(tty)"

# ...and clear all incoming data (picocom info, any pending bytes)
set timeout 1
expect timeout

# After this, any incoming bytes will be sent by the re-uploaded firmware, whenever it's up and running

# The first test is for UART. If UART fails we won't see anything incoming (not even the nicely programmed error message)
send_user "UART\n"

# Upload takes ~25 seconds
set timeout 30

expect {
	"Power Quality Monitor Prod Test" { send_user "pass\n" }
	timeout                           { send_user "fail\n"; exit 1 }
}

proc report_passfail {} {
	expect {
		"Passed" { send_user "pass\n" }
		"Failed" { send_user "fail\n"; }
	}
}

proc fwd_yesno {} {
	expect_user {
		-re "y|Y" { send "y" }
		-re "n|N" { send "n" }
	}
}

proc noninteractive_test {name tests} {
	expect "Testing $name"
	send_user "$name\n"
	expect "$name $tests "
	report_passfail
}

noninteractive_test "RAM" "test"
noninteractive_test "FLASH" "test"

expect "Testing LCD"
expect "Is display working?"
send_user "LCD\n"
fwd_yesno
expect "LCD test "
report_passfail

noninteractive_test "RTC" "test"
noninteractive_test "SD card" "test"

expect "Testing LEDs and buttons"

proc test_led {i} {
	expect {
		"Is LED DS$i ON?"              { if {$i > 1} { send_user "pass\n" }; send_user "led$i\n" }
		"LED & BUTTON tests Failed..." { send_user "fail\n"; }
	}
	fwd_yesno
}

test_led 1
test_led 2
test_led 3
test_led 4
# ^ Pin 4 is also part of JTAG and will not work while programmer is connected

proc test_button {i} {
	expect {
		"Press button S$i"             { send_user "pass\n"; send_user "button$i\n" }
		"LED & BUTTON tests Failed..." { send_user "fail\n"; }	
	}
}

test_button 1
test_button 2
test_button 3

expect "LED & BUTTON tests "
report_passfail

noninteractive_test "T1L" "tests"
noninteractive_test "WIZ ETH" "tests"
noninteractive_test "ADE9430" "tests"

# Last test doesn't "end". The tester should check the T1L link by means other than UART.
expect "Testing T1L SOCKET"
send_user "t1lsocket\n"

expect "IP address: "
expect -re {\d+\.\d+\.\d+\.\d+} { send_user "$expect_out(0,string)\n" }

